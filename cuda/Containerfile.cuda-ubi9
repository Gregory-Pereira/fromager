# FIXME: Does not use a virtualenv, can/should it?

FROM nvcr.io/nvidia/cuda:12.3.2-devel-ubi9

ARG PYTHON=python3.11

# The diff command is needed in tests run while building patchelf
#
# The base layer is minimal, so instead of tracking individual tools
# needed by different build steps or scripts we just install the
# development environment.
RUN dnf -y groupinstall "Development Tools"

# Commands needed to prepare source or run the script.
RUN dnf -y install patch git jq

# cmake needed, otherwise:
# Building wheels for collected packages: patchelf, ninja
# ...
# Building wheel for patchelf (pyproject.toml) did not run successfully.
# ...
# Problem with the CMake installation, aborting build. CMake executable is cmake
#
# autoconf/automake needed, otherwise e.g.:
# [ 44%] Performing patch step for 'build_patchelf'
# ./bootstrap.sh: line 2: autoreconf: command not found
RUN dnf -y install cmake autoconf automake

# C extension compilation
RUN dnf -y install  gcc gcc-c++

# Our ninja wheels wrap the ninja-build RPM package
RUN dnf -y install ninja-build

# rust/cargo needed, otherwise:
# Building wheels for collected packages: maturin
# error: can't find Rust compiler
RUN dnf -y install rust cargo

# Needed for cffi build
RUN dnf -y install libffi libffi-devel

# Needed for cryptography build
RUN dnf -y install openssl-devel

# Needed for pillow build
RUN dnf -y install zlib-devel libjpeg-devel

# The python interpreter we want, with dev libraries
RUN dnf -y install $PYTHON ${PYTHON}-devel ${PYTHON}-pip

## From instructlab/containers/cuda/Containerfile

# Add EPEL repo for $WHY
RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm

# Add Nvidia repo for CUDA libraries
RUN dnf config-manager \
    --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/cuda-rhel9.repo \
    && dnf repolist \
    && dnf config-manager --set-enabled cuda-rhel9-x86_64 \
    && dnf config-manager --set-enabled cuda \
    && dnf config-manager --set-enabled epel \
    && dnf update -y

# Install those CUDA libraries
RUN dnf install -y libcudnn8 nvidia-driver-NVML nvidia-driver-cuda-libs

# We don't want to worry about pip reporting that there are newer
# versions, just use the version in the RPM installed earlier.
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install CUDA wheel from PyPI
RUN $PYTHON -m pip install \
    --no-cache-dir \
    --force-reinstall nvidia-cuda-nvcc-cu12 \
    && $PYTHON -m pip freeze

# FIXME: This may not do anything?
RUN export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64" \
    && export CUDA_HOME=/usr/local/cuda \
    && export PATH="/usr/local/cuda/bin:$PATH" \
    && export XLA_TARGET=cuda120 \
    && export XLA_FLAGS=--xla_gpu_cuda_data_dir=/usr/local/cuda

# Configure the package index URLs. All need to point to the *simple*
# index, as these values are passed to pip via `--index-url`.
ARG TOOL_SERVER_URL=https://pyai.fedorainfracloud.org/internal/tools/+simple/
ARG SDIST_SERVER_URL=https://pyai.fedorainfracloud.org/experimental/sources/+simple/
# FIXME: We need to update this to a cuda-specific repo. Maybe experimental/cuda-ubi9?
ARG WHEEL_SERVER_URL=https://pyai.fedorainfracloud.org/experimental/cpu/+simple/

# The build script reports on the link status of binary wheels using
# audit wheel.
RUN $PYTHON -m pip install auditwheel

WORKDIR /src

# Install the build tools
COPY . /mirror-builder
RUN $PYTHON -m pip install \
    --no-cache-dir \
    --index-url $TOOL_SERVER_URL \
    /mirror-builder

# Signal to the CMD script that it is running inside the container so
# it uses the correct mode.
ENV IN_CONTAINER=true

CMD ["/mirror-builder/cuda/build_cuda.sh"]

# RUN tar cvf /work-dir/built-artifacts.tar /wheels-repo/build /sdists-repo/downloads /build-logs

#ARG GIT_TAG=stable
#RUN CMAKE_ARGS="-DLLAMA_CUBLAS=on" CFLAGS="-mno-avx" $PYTHON -m pip install -r https://raw.githubusercontent.com/instructlab/instructlab/${GIT_TAG}/requirements.txt --force-reinstall --no-cache-dir llama-cpp-python
#RUN $PYTHON -m pip install git+https://github.com/instructlab/instructlab.git@${GIT_TAG}
