stages:
  - test-quick
  - test-e2e
  - manual

.mr_rules_template: &mr_rules_template
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Draft:/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.tox_job_template: &tox_job_template
  <<: *mr_rules_template
  image: fedora:39
  before_script:
    - dnf install -y python3
    - python3 -m venv tox_env
    - ./tox_env/bin/python3 --version
    - ./tox_env/bin/python3 -m pip install --upgrade tox
  script:
    - ./tox_env/bin/tox -e $TOX_TARGET


tox-linter:
  stage: test-quick
  variables:
    TOX_TARGET: linter
  <<: *tox_job_template


tox-unit:
  stage: test-quick
  variables:
    TOX_TARGET: py
  <<: *tox_job_template


shellcheck:
  <<: *mr_rules_template
  stage: test-quick
  image: fedora:39
  before_script:
    - dnf install -y ShellCheck git
  script:
    - ./shellcheck.sh


# This test does not use its own containers and does not run any
# portion of the build in isolation. It's useful for verifying that
# building some of the more complex packages, with patches, works OK
# and that the dependency resolution algorithm is handling all of the
# edge cases.
e2e-without-isolation:
  <<: *mr_rules_template
  stage: test-e2e

  image: fedora:39

  parallel:
    matrix:
      - PYTHON_TO_TEST:
          - python3.9
          - python3.11
          - python3.12

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON_TO_TEST=$PYTHON_TO_TEST ./e2e/test_without_isolation.sh


# This test does not use its own containers and does not run any
# portion of the build in isolation. It's useful for verifying that
# when a build dependency is not present in the index, we report a
# full, clear error message showing all of the dependencies so someone
# can add everything at once.
e2e-report-missing-dependency:
  <<: *mr_rules_template
  stage: test-e2e

  image: fedora:39

  parallel:
    matrix:
      - PYTHON_TO_TEST:
          - python3.9
          - python3.11
          - python3.12

  before_script:
    - bash -x ./setup.sh
    - dnf install -y iproute

  script:
    - PYTHON_TO_TEST=$PYTHON_TO_TEST ./e2e/test_report_missing_dependency.sh


# Manual pipeline to produce bootstrap artifacts for determining which
# packages need to be included to produce a build.
bootstrap:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "bootstrap"

  variables:
    DIST_NAME: "stevedore"
    DIST_VERSION: "5.2.0"
    PYTHON: "python3.11"

  artifacts:
    paths:
      - work-dir/build-order.json
      - work-dir/bootstrap.log

  image: fedora:39

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON=$PYTHON ./pipelines/bootstrap.sh ${DIST_NAME}==${DIST_VERSION}

# Manual pipeline to produce one wheel.
build-wheel:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel"

  variables:
    DIST_NAME: ""
    DIST_VERSION: ""
    PYTHON: "python3.11"

  artifacts:
    paths:
      - wheels-repo/build/*.whl
      - sdists-repo/downloads/*.tar.gz
      - build-logs/*.log
      - work-dir/*/*requirements.txt

  image: fedora:39

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON=$PYTHON ./build_wheel.sh ${DIST_NAME} ${DIST_VERSION}
