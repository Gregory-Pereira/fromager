stages:
  - test-quick
  - test-e2e
  - manual

.mr_rules_template: &mr_rules_template
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Draft:/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.tox_job_template: &tox_job_template
  <<: *mr_rules_template
  image: fedora:39
  before_script:
    - dnf install -y python3
    - python3 -m venv tox_env
    - ./tox_env/bin/python3 --version
    - ./tox_env/bin/python3 -m pip install --upgrade tox
  script:
    - ./tox_env/bin/tox -e $TOX_TARGET

.python_versions: &python_versions
  - PYTHON:
    - python3.11
    - python3.12


tox-linter:
  stage: test-quick
  variables:
    TOX_TARGET: linter
  <<: *tox_job_template


tox-unit:
  stage: test-quick
  variables:
    TOX_TARGET: py
  <<: *tox_job_template


shellcheck:
  <<: *mr_rules_template
  stage: test-quick
  image: fedora:39
  before_script:
    - dnf install -y ShellCheck git
  script:
    - ./shellcheck.sh


markdown-lint:
  <<: *mr_rules_template
  stage: test-quick
  image: fedora:39
  before_script:
    - dnf -y install nodejs
    - npm install -g markdownlint@v0.25.1 markdownlint-cli2@v0.4.0
  script:
    - ./hack/run_markdownlint.sh


# This test does not use its own containers and does not run any
# portion of the build in isolation. It's useful for verifying that
# building some of the more complex packages, with patches, works OK
# and that the dependency resolution algorithm is handling all of the
# edge cases.
e2e-without-isolation:
  <<: *mr_rules_template
  stage: test-e2e

  image: fedora:39

  parallel:
    matrix:
      *python_versions

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON=$PYTHON ./e2e/test_without_isolation.sh


# This test does not use its own containers and does not run any
# portion of the build in isolation. It's useful for verifying that
# when a build dependency is not present in the index, we report a
# full, clear error message showing all of the dependencies so someone
# can add everything at once.
e2e-report-missing-dependency:
  <<: *mr_rules_template
  stage: test-e2e

  image: fedora:39

  parallel:
    matrix:
      *python_versions

  before_script:
    - bash -x ./setup.sh
    # The test script needs to run `ip route` but nothing else in the
    # stack needs that command so add it as a dependency in the test
    # setup instead of more globally in setup.sh or the Containerfile.
    - dnf install -y iproute

  script:
    - PYTHON=$PYTHON ./e2e/test_report_missing_dependency.sh

# Pre-merge pipeline for testing the onboard_sdist.sh pipeline. It
# grabs a source archive without uploading it to the index server.
e2e-onboard-sdist:
  <<: *mr_rules_template
  stage: test-e2e

  artifacts:
    paths:
      - sdists-repo/downloads/*.tar.gz
      - build-logs/*.log

  image: fedora:39

  before_script:
    # We need a python interpreter. It doesn't matter which one, so
    # pick the one that's going to be the default for most builds.
    - dnf install -y python3.11

  script:
    - ./pipelines/onboard_sdist.sh numpy 1.26.4


# This test does not use its own containers and does not run any
# portion of the build in isolation. It's useful for verifying that
# building a base-level package works.
e2e-build-flit-core:
  <<: *mr_rules_template
  stage: test-e2e

  image: fedora:39

  parallel:
    matrix:
      *python_versions

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON=$PYTHON ./e2e/test_build_flit_core.sh


# Manual pipeline to produce bootstrap artifacts for determining which
# packages need to be included to produce a build.
bootstrap:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "bootstrap"

  variables:
    DIST_NAME: ""
    DIST_VERSION: ""
    PYTHON: "python3.11"

  artifacts:
    paths:
      - work-dir/build-order.json
      - work-dir/bootstrap.log

  image: fedora:39

  before_script:
    - bash -x ./setup.sh

  script:
    - PYTHON=$PYTHON ./pipelines/bootstrap.sh ${DIST_NAME}==${DIST_VERSION}

# Manual pipeline to update the tools used by the pipelines.
onboard-sdist:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "update-tools"

  variables:
    DIST_NAME: ""
    DIST_VERSION: ""
    SECURE_FILES_DOWNLOAD_PATH: ./config

  artifacts:
    paths:
      - build-logs/*.log

  image: fedora:39

  before_script:
    # We need a python interpreter. It doesn't matter which one, so
    # pick the one that's going to be the default for most builds.
    - dnf install -y python3.11
    # Extra dependencies needed for the secure files installer.
    - dnf install -y which curl

  script:
    # Initialize secure files, following https://docs.gitlab.com/ee/ci/secure_files/
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ./pipelines/update_tools.sh
    - CONFIG=$SECURE_FILES_DOWNLOAD_PATH/pypirc.ini INDEX=internal/tools ./upload_to_index.sh wheels-repo/downloads/*.whl sdists-repo/downloads/*.tar.gz

# Manual pipeline to copy the sdist for 1 package to the index server.
onboard-sdist:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "onboard-sdist"

  variables:
    DIST_NAME: ""
    DIST_VERSION: ""
    SECURE_FILES_DOWNLOAD_PATH: ./config

  artifacts:
    paths:
      - sdists-repo/downloads/*.tar.gz
      - build-logs/*.log

  image: fedora:39

  before_script:
    # We need a python interpreter. It doesn't matter which one, so
    # pick the one that's going to be the default for most builds.
    - dnf install -y python3.11
    # Extra dependencies needed for the secure files installer.
    - dnf install -y which curl

  script:
    # Initialize secure files, following https://docs.gitlab.com/ee/ci/secure_files/
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ./pipelines/onboard_sdist.sh ${DIST_NAME} ${DIST_VERSION}
    - CONFIG=$SECURE_FILES_DOWNLOAD_PATH/pypirc.ini INDEX=experimental/sources ./upload_to_index.sh sdists-repo/downloads/*.tar.gz


# Base template for a build-wheel job
.build-wheel-base:
  stage: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel"

  variables:
    DIST_NAME: ""
    DIST_VERSION: ""
    PYTHON: ""
    SECURE_FILES_DOWNLOAD_PATH: ./config

  artifacts:
    paths:
      - wheels-repo/build/*.whl
      - sdists-repo/downloads/*.tar.gz
      - build-logs/*.log
      - work-dir/*/*requirements.txt

  image: fedora:39

  before_script:
    - bash -x ./setup.sh
    # Extra dependencies needed for the secure files installer.
    - dnf install -y which curl

  script:
    # Initialize secure files, following https://docs.gitlab.com/ee/ci/secure_files/
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - PYTHON=$PYTHON ./build_wheel.sh ${DIST_NAME} ${DIST_VERSION}
    - CONFIG=$SECURE_FILES_DOWNLOAD_PATH/pypirc.ini INDEX=experimental/cpu ./upload_to_index.sh wheels-repo/build/*.whl


# Manual pipeline to produce one wheel for python 3.11. This is also
# the default wheel for building pure python wheels that do not have a
# component that requires different python versions.
build-wheel-py311:
  extends: .build-wheel-base
  variables:
    PYTHON: "python3.11"


# Manual pipeline to produce one wheel for python 3.12. This should
# only be triggered for packages with platform-specific components
# that need to be compiled differently for different versions of
# python.
build-wheel-py312:
  extends: .build-wheel-base
  variables:
    PYTHON: "python3.12"
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "cmake"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "Cython"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "MarkupSafe"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "numpy"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "PyYAML"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "torch"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $JOB == "build-wheel" && $DIST_NAME == "vllm"
